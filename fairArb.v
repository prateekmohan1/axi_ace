//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/p/m/o/pmohan6/EEE591Brunhav/ProjPart3/starter-03/primitives/fairArb.vp
//  Source template: fairArb
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

/////////////
// fairArb.vp
//
// bitWidth (_GENESIS2_DECLARATION_PRIORITY_) = 16
//

// Use built in module name using Gen2 variable mname

module fairArb (
	input logic [15:0] bids,
	output logic [15:0] wins,
	input logic get_next_win,
	input logic clk,
	input logic rst
		);

	//Initialize States
	parameter SIZE = 3;
	parameter S0=3'b000, S1=3'b001, S2=3'b010, S3=3'b011, S4=3'b100, S5=3'b101, S6=3'b110;

	//Next_State, Current state variable
	logic [SIZE-1:0] state;
	logic [SIZE-1:0] next_state;

	//Priority counter
	logic [3:0] dec1;
	logic [3:0] dec2;

	//Wires
	logic [15:0] bid1;
	logic [15:0] bid2;
	logic [15:0] b [15:0];
	logic [15:0] d [15:0];
	logic [15:0] out_check;
	logic [3:0] new_priority;
	logic [3:0] pr_in;

	//Flip Flops
	logic [15:0] bids_cycle_f;
	logic [3:0] priority_f;

	//Inputs to flip flops
	logic [3:0] priority_d;
	logic [15:0] wins_d;


	//Select lines
	logic sB, sD;
	logic [1:0] sC;

	always @ (*) begin

		case (sC)
			2'b00: priority_d = dec2;
			2'b01: priority_d = priority_f;
			2'b10: priority_d = pr_in;
			2'b11: priority_d = 0;
		endcase

	end

	always @ (*) begin

		case (sB)
			1'b0: wins_d = bid1;
			1'b1: wins_d = bid2;
		endcase

	end

	always @ (*) begin

		case (sD)
			1'b0: begin
				bid2 = out_check;
				pr_in = new_priority + 1;
			end
			1'b1: begin
				bid2 = d[priority_f];
				pr_in = priority_f + 1;
			end
		endcase

	end

	always @ (*) begin

		bids_cycle_f = bids;

		//Check for bids
		if ((bids_cycle_f & 16'd1) != 16'b0) begin
			bid1 = 16'd1;
		end
		else if ((bids_cycle_f & 16'd2) != 16'b0) begin
			bid1 = 16'd2;
		end
		else if ((bids_cycle_f & 16'd4) != 16'b0) begin
			bid1 = 16'd4;
		end
		else if ((bids_cycle_f & 16'd8) != 16'b0) begin
			bid1 = 16'd8;
		end
		else if ((bids_cycle_f & 16'd16) != 16'b0) begin
			bid1 = 16'd16;
		end
		else if ((bids_cycle_f & 16'd32) != 16'b0) begin
			bid1 = 16'd32;
		end
		else if ((bids_cycle_f & 16'd64) != 16'b0) begin
			bid1 = 16'd64;
		end
		else if ((bids_cycle_f & 16'd128) != 16'b0) begin
			bid1 = 16'd128;
		end
		else if ((bids_cycle_f & 16'd256) != 16'b0) begin
			bid1 = 16'd256;
		end
		else if ((bids_cycle_f & 16'd512) != 16'b0) begin
			bid1 = 16'd512;
		end
		else if ((bids_cycle_f & 16'd1024) != 16'b0) begin
			bid1 = 16'd1024;
		end
		else if ((bids_cycle_f & 16'd2048) != 16'b0) begin
			bid1 = 16'd2048;
		end
		else if ((bids_cycle_f & 16'd4096) != 16'b0) begin
			bid1 = 16'd4096;
		end
		else if ((bids_cycle_f & 16'd8192) != 16'b0) begin
			bid1 = 16'd8192;
		end
		else if ((bids_cycle_f & 16'd16384) != 16'b0) begin
			bid1 = 16'd16384;
		end
		else if ((bids_cycle_f & 16'd32768) != 16'b0) begin
			bid1 = 16'd32768;
		end
		else begin
			bid1 = 0;
		end

		//Check which bids are bidding
		d[0] = bids_cycle_f & 16'd1;
		b[0] = (bids_cycle_f & 16'd1) >> 0;
		d[1] = bids_cycle_f & 16'd2;
		b[1] = (bids_cycle_f & 16'd2) >> 1;
		d[2] = bids_cycle_f & 16'd4;
		b[2] = (bids_cycle_f & 16'd4) >> 2;
		d[3] = bids_cycle_f & 16'd8;
		b[3] = (bids_cycle_f & 16'd8) >> 3;
		d[4] = bids_cycle_f & 16'd16;
		b[4] = (bids_cycle_f & 16'd16) >> 4;
		d[5] = bids_cycle_f & 16'd32;
		b[5] = (bids_cycle_f & 16'd32) >> 5;
		d[6] = bids_cycle_f & 16'd64;
		b[6] = (bids_cycle_f & 16'd64) >> 6;
		d[7] = bids_cycle_f & 16'd128;
		b[7] = (bids_cycle_f & 16'd128) >> 7;
		d[8] = bids_cycle_f & 16'd256;
		b[8] = (bids_cycle_f & 16'd256) >> 8;
		d[9] = bids_cycle_f & 16'd512;
		b[9] = (bids_cycle_f & 16'd512) >> 9;
		d[10] = bids_cycle_f & 16'd1024;
		b[10] = (bids_cycle_f & 16'd1024) >> 10;
		d[11] = bids_cycle_f & 16'd2048;
		b[11] = (bids_cycle_f & 16'd2048) >> 11;
		d[12] = bids_cycle_f & 16'd4096;
		b[12] = (bids_cycle_f & 16'd4096) >> 12;
		d[13] = bids_cycle_f & 16'd8192;
		b[13] = (bids_cycle_f & 16'd8192) >> 13;
		d[14] = bids_cycle_f & 16'd16384;
		b[14] = (bids_cycle_f & 16'd16384) >> 14;
		d[15] = bids_cycle_f & 16'd32768;
		b[15] = (bids_cycle_f & 16'd32768) >> 15;

		//Decoder for figuring out priority
                case (wins_d)
                16'd1: begin
                        dec1 = 0;
                end
                16'd2: begin
                        dec1 = 1;
                end
                16'd4: begin
                        dec1 = 2;
                end
                16'd8: begin
                        dec1 = 3;
                end
                16'd16: begin
                        dec1 = 4;
                end
                16'd32: begin
                        dec1 = 5;
                end
                16'd64: begin
                        dec1 = 6;
                end
                16'd128: begin
                        dec1 = 7;
                end
                16'd256: begin
                        dec1 = 8;
                end
                16'd512: begin
                        dec1 = 9;
                end
                16'd1024: begin
                        dec1 = 10;
                end
                16'd2048: begin
                        dec1 = 11;
                end
                16'd4096: begin
                        dec1 = 12;
                end
                16'd8192: begin
                        dec1 = 13;
                end
                16'd16384: begin
                        dec1 = 14;
                end
                16'd32768: begin
                        dec1 = 15;
                end
                default: begin
                        dec1 = 0;
                end
                endcase

		dec2 = dec1 + 1'b1;

		sD = b[priority_f] & 1'b1;

		if (bids_cycle_f == 16'b0) begin
			out_check = 16'b0;
			new_priority = new_priority;
		end
		else begin
			case (priority_f)
			5'd0: begin
			case (1'b1)
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			endcase
			end
			5'd1: begin
			case (1'b1)
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			endcase
			end
			5'd2: begin
			case (1'b1)
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			endcase
			end
			5'd3: begin
			case (1'b1)
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			endcase
			end
			5'd4: begin
			case (1'b1)
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			endcase
			end
			5'd5: begin
			case (1'b1)
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			endcase
			end
			5'd6: begin
			case (1'b1)
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			endcase
			end
			5'd7: begin
			case (1'b1)
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			endcase
			end
			5'd8: begin
			case (1'b1)
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			endcase
			end
			5'd9: begin
			case (1'b1)
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			endcase
			end
			5'd10: begin
			case (1'b1)
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			endcase
			end
			5'd11: begin
			case (1'b1)
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			endcase
			end
			5'd12: begin
			case (1'b1)
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			endcase
			end
			5'd13: begin
			case (1'b1)
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			endcase
			end
			5'd14: begin
			case (1'b1)
			b[15]: begin
			  new_priority = 15;
			  out_check = d[15];
			end
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			endcase
			end
			5'd15: begin
			case (1'b1)
			b[0]: begin
			  new_priority = 0;
			  out_check = d[0];
			end
			b[1]: begin
			  new_priority = 1;
			  out_check = d[1];
			end
			b[2]: begin
			  new_priority = 2;
			  out_check = d[2];
			end
			b[3]: begin
			  new_priority = 3;
			  out_check = d[3];
			end
			b[4]: begin
			  new_priority = 4;
			  out_check = d[4];
			end
			b[5]: begin
			  new_priority = 5;
			  out_check = d[5];
			end
			b[6]: begin
			  new_priority = 6;
			  out_check = d[6];
			end
			b[7]: begin
			  new_priority = 7;
			  out_check = d[7];
			end
			b[8]: begin
			  new_priority = 8;
			  out_check = d[8];
			end
			b[9]: begin
			  new_priority = 9;
			  out_check = d[9];
			end
			b[10]: begin
			  new_priority = 10;
			  out_check = d[10];
			end
			b[11]: begin
			  new_priority = 11;
			  out_check = d[11];
			end
			b[12]: begin
			  new_priority = 12;
			  out_check = d[12];
			end
			b[13]: begin
			  new_priority = 13;
			  out_check = d[13];
			end
			b[14]: begin
			  new_priority = 14;
			  out_check = d[14];
			end
			endcase
			end
			endcase
		end

        //Case for states
        case (state)
        S0: begin
			sB = 0;
			sC = 2'b11;
			next_state = S1;
        end
        S1: begin
			sB = 0;
			sC = 2'b00;
			next_state = S2;
		end
		S2: begin
			sB = 1;
			if (get_next_win == 1)  begin
				if (bids_cycle_f == 16'b0) begin
					sC = 2'b01;
				end
				else begin
					sC = 2'b10;
				end
			end
			else begin
				sC = 2'b01;
			end
			next_state = S2;
		end
		default: begin
			sC = 2'b11;
			sB = 0;
		end
		endcase

	end

	//Flip Flop for wins
	always @ (posedge clk) begin
		if (~rst) begin
			wins <= 0;
		end
		else begin
			wins <= wins_d;
		end
	end

	//Flip Flop for priority 
	always @ (posedge clk) begin
		if (~rst) begin
			priority_f <= 0;
		end
		else begin
			priority_f <= priority_d;
		end
	end
	//Flip Flop for bids
	//dffbW_unq1  bids_ff(.d(bids),.q(bids_cycle_f),.clk(clk),.rst(rst));

	//Flip Flop for state
	always @ (posedge clk) begin
		if (~rst) begin
			state <= S0;
		end
		else begin
			state <= next_state;
		end
	end


//Empty module
endmodule: fairArb
